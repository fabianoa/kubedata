apiVersion: v1
kind: Secret
metadata:
  name: regcred
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJkb2NrZXIuYXBwLnNlbWEuZGYuZ292LmJyIjogewoJCQkiYXV0aCI6ICJZV1J0YVc0NlUybHpaR2xoWm1GelpUST0iCgkJfSwKCQkiaHR0cHM6Ly9pbmRleC5kb2NrZXIuaW8vdjEvIjogewoJCQkiYXV0aCI6ICJabUZpYVdGdWIyRTZNamt3TVRrMyIKCQl9Cgl9Cn0K
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zeppelin-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zeppelin-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zeppelin-server
    spec:
      serviceAccountName: zeppelin-server
      imagePullSecrets:
          - name: regcred
      volumes:
      - name: nginx-conf
        configMap:
          name: zeppelin-server-conf
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: interpreter-conf
        configMap:
          name: zeppelin-interpreter-conf
      - name: zeppelin-site-conf
        configMap:
          name: zeppelin-site-conf    
      - name: shiro-conf
        configMap:
          name: zeppelin-shiro-conf    
      - name: log-conf
        configMap:
          name: zeppelin-log-conf
      - name: zeppelin-server-notebook-volume
        persistentVolumeClaim:
          claimName: zeppelin-notebook
      - name: zeppelin-server-conf
        persistentVolumeClaim:
          claimName: zeppelin-conf
      securityContext:
          fsGroup: 1
      containers:
      - name: zeppelin-server
        image: fabianoa/zeppelin-server:0.10.1.3
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1
          runAsGroup: 1
        #command: ["ls"]
        command: ["sh", "-c", "$(ZEPPELIN_HOME)/bin/zeppelin.sh --config /opt/zeppelin/conf"]
        lifecycle:
          preStop:
            exec:
              # SIGTERM triggers a quick exit; gracefully terminate instead
              command: ["sh", "-c", "ps -ef | grep org.apache.zeppelin.server.ZeppelinServer | grep -v grep | awk '{print $2}' | xargs kill"]
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        - name: rpc
          containerPort: 12320
        env:
        - name: POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: zeppelin-server-conf-map
        volumeMounts:
         - name: zeppelin-server-notebook-volume     # configure this to persist notebook
           mountPath: /opt/zeppelin/notebook
         - name: shiro-conf
           mountPath:  /opt/zeppelin/conf/shiro.ini
           subPath: shiro.ini
         - name: zeppelin-site-conf
           mountPath:  /opt/zeppelin/conf/zeppelin-site.xml
           subPath: zeppelin-site.xml
         - name: log-conf
           mountPath: /opt/zeppelin/conf/log4j.properties
           subPath: log4j.properties
         - name: zeppelin-server-conf                # configure this to persist Zeppelin configuration
           mountPath: /opt/zeppelin/conf
         #- name: interpreter-conf
         #  mountPath:  /opt/zeppelin/conf/interpreter.json
         #  subPath: interpreter.json
      #  - name: zeppelin-server-custom-k8s          # configure this to mount customized Kubernetes spec for interpreter
      #    mountPath: /zeppelin/k8s
      - name: zeppelin-server-gateway
        image: nginx:1.14.0
        command: ["/bin/sh", "-c"]
        env:
        - name: SERVICE_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: zeppelin-server-conf-map
              key: SERVICE_DOMAIN
        args:
          - cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf;
            sed -i -e "s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g" /etc/nginx/nginx.conf;
            sed -i -e "s/NAMESPACE/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/g" /etc/nginx/nginx.conf;
            cat /etc/nginx/nginx.conf;
            /usr/sbin/nginx
        volumeMounts:
          - name: nginx-conf
            mountPath: /tmp/conf
        lifecycle:
          preStop:
            exec:
              # SIGTERM triggers a quick exit; gracefully terminate instead
              command: ["/usr/sbin/nginx", "-s", "quit"]
      - name: dnsmasq  # nginx requires dns resolver for dynamic dns resolution
        image: "janeczku/go-dnsmasq:release-1.0.5"
        args:
          - --listen
          - "127.0.0.1:53"
          - --default-resolver
          - --append-search-domains
          - --hostsfile=/etc/hosts
          - --verbose
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zeppelin-notebook
spec:
 storageClassName: default
 accessModes:
   - ReadWriteOnce
 resources:
   requests:
     storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zeppelin-conf
spec:
 storageClassName: default
 volumeMode: Filesystem
 accessModes:
    - ReadWriteOnce
 resources:
   requests:
     storage: 1Gi
---
kind: Service
apiVersion: v1
metadata:
  name: zeppelin-server
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
    - name: rpc            # port name is referenced in the code. So it shouldn't be changed.
      port: 12320
  selector:
    app.kubernetes.io/name: zeppelin-server
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zeppelin-server
  namespace: kubedata-zeppelin
imagePullSecrets:
- name: regcred
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: zeppelin-server-role
  namespace: kubedata-zeppelin
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["create", "get", "update", "patch", "list", "delete", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["bind", "create", "get", "update", "patch", "list", "delete", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: kubedata-zeppelin
  name: zeppelin-server-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["create", "get", "update", "patch", "list", "delete", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: [ "create", "get", "update", "patch", "list", "delete", "watch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: zeppelin-server-role-binding
  namespace: kubedata-zeppelin
subjects:
- kind: ServiceAccount
  name: zeppelin-server
roleRef:
  kind: Role
  name: zeppelin-server-role
  apiGroup: rbac.authorization.k8s.io
